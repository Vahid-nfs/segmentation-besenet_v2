import torchimport numpy as npimport pandas as pd import matplotlib.pyplot as pltfrom torchsummary import summaryimport cv2from torchvision import transformsimport torch.functional as Ffrom torch.utils.data import Datasetfrom glob import globfrom model import Custom_model last_epoch=0CLASSES = 13checkpoint_path="checkpoints"model=Custom_model(CLASSES)model.load_state_dict(torch.load(f"{checkpoint_path}/model_std_{last_epoch}.pth"))summary(model,(3,256,256))model.train(False)class costum_dataset(Dataset):    def __init__(self,dataframe,transform=None,target_transform=None):        super().__init__()        self.df=dataframe        self.trans=transform        self.tar_trans=target_transform            def __len__(self):        return len(self.df)        def __getitem__(self,index):        img=cv2.imread(self.df.iloc[index]["img_path"])        image,mask=img[:,:256,:],img[:,256:,:]                if self.trans:            image=self.trans(image)                    if self.tar_trans :            mask=self.tar_trans(mask)                            return(image.float(),mask)        val_data=glob("./cityscapes_data/val/*.jpg")val_dataset=pd.DataFrame(val_data,columns=["img_path"])        def bin_image(mask):    bins = np.array([20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240])    new_mask = np.digitize(mask, bins)    return new_mask     def target_transform (mask):    mask=cv2.cvtColor(mask,cv2.COLOR_RGB2GRAY)    mask=mask=bin_image(mask)    return(mask)transform=transforms.Compose([transforms.ToTensor()])     val_set=costum_dataset(val_dataset, transform=transform, target_transform=target_transform)img,msk=val_set.__getitem__(1)pred=torch.argmax(torch.squeeze(model(torch.unsqueeze(img,0))[0]),0)plot_img=transforms.ToPILImage()(img)pred=pred.detach().numpy()fig,(ax1,ax2,ax3)=plt.subplots(nrows=1,ncols=3)ax1.imshow(plot_img)ax2.imshow(pred)ax3.imshow(msk*20)fig.show()